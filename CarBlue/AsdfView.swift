//
// AsdfView.swift
// Generated by Core Animator version 1.1.1 on 8/31/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class AsdfView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 407, height: 308))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    
	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:407, height:308)
		__scaling__.center = CGPoint(x:203.7, y:154.4)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let signal = UIView()
		signal.bounds = CGRect(x:0, y:0, width:376.0, height:277.3)
		signal.layer.position = CGPoint(x:201.780, y:152.184)
		__scaling__.addSubview(signal)
		viewsByName["signal"] = signal

		let dot2 = UIImageView()
		dot2.bounds = CGRect(x:0, y:0, width:72.0, height:72.0)
		var imgDot: UIImage!
		if let imagePath = bundle.path(forResource: "dot.png", ofType:nil) {
			imgDot = UIImage(contentsOfFile:imagePath)
		}
		dot2.image = imgDot
		dot2.contentMode = .center;
		dot2.layer.position = CGPoint(x:188.000, y:241.283)
		signal.addSubview(dot2)
		viewsByName["dot 2"] = dot2

		let bottomWave22 = UIImageView()
		bottomWave22.bounds = CGRect(x:0, y:0, width:252.0, height:84.0)
		var imgBottomWave: UIImage!
		if let imagePath = bundle.path(forResource: "bottomWave.png", ofType:nil) {
			imgBottomWave = UIImage(contentsOfFile:imagePath)
		}
		bottomWave22.image = imgBottomWave
		bottomWave22.contentMode = .center;
		bottomWave22.layer.position = CGPoint(x:188.000, y:143.591)
		signal.addSubview(bottomWave22)
		viewsByName["bottomWave 2 2"] = bottomWave22

		let topWave2 = UIImageView()
		topWave2.bounds = CGRect(x:0, y:0, width:376.0, height:114.0)
		var imgTopWave: UIImage!
		if let imagePath = bundle.path(forResource: "topWave.png", ofType:nil) {
			imgTopWave = UIImage(contentsOfFile:imagePath)
		}
		topWave2.image = imgTopWave
		topWave2.contentMode = .center;
		topWave2.layer.position = CGPoint(x:188.000, y:57.000)
		signal.addSubview(topWave2)
		viewsByName["topWave 2"] = topWave2

		self.viewsByName = viewsByName
	}

	// - MARK: doit

	func addDoitAnimation() {
		addDoitAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDoitAnimation(_ completion: ((Bool) -> Void)?) {
		addDoitAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDoitAnimation(removedOnCompletion: Bool) {
		addDoitAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDoitAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDoitAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDoitAnimationWithBeginTime(_ beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 6.750
			representativeAnimation.delegate = self as? CAAnimationDelegate
			self.layer.add(representativeAnimation, forKey: "Doit")
			self.animationCompletions[layer.animation(forKey: "Doit")!] = complete
		}

		let topWave2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		topWave2RotationAnimation.duration = 6.750
		topWave2RotationAnimation.values = [0.000 , 0.000 , 0.052 , -0.052 , 0.000 ]
		topWave2RotationAnimation.keyTimes = [0.000, 0.888 , 0.926 , 0.963 , 1.000 ]
		topWave2RotationAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming]
		topWave2RotationAnimation.beginTime = beginTime
		topWave2RotationAnimation.fillMode = fillMode
		topWave2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["topWave 2"]?.layer.add(topWave2RotationAnimation, forKey:"doit_Rotation")

		let topWave2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		topWave2OpacityAnimation.duration = 6.750
		topWave2OpacityAnimation.values = [0.000 , 0.057 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , 1.000 ]
		topWave2OpacityAnimation.keyTimes = [0.000, 0.519 , 0.593 , 0.667 , 0.741 , 0.815 , 0.889 , 1.000 ]
		topWave2OpacityAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, linearTiming]
		topWave2OpacityAnimation.beginTime = beginTime
		topWave2OpacityAnimation.fillMode = fillMode
		topWave2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["topWave 2"]?.layer.add(topWave2OpacityAnimation, forKey:"doit_Opacity")

		let dot2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		dot2ScaleXAnimation.duration = 6.750
		dot2ScaleXAnimation.values = [1.000 , 0.900 , 1.100 , 1.100 ]
		dot2ScaleXAnimation.keyTimes = [0.000, 0.074 , 0.148 , 1.000 ]
		dot2ScaleXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, linearTiming]
		dot2ScaleXAnimation.beginTime = beginTime
		dot2ScaleXAnimation.fillMode = fillMode
		dot2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["dot 2"]?.layer.add(dot2ScaleXAnimation, forKey:"doit_ScaleX")

		let dot2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dot2ScaleYAnimation.duration = 6.750
		dot2ScaleYAnimation.values = [1.000 , 0.900 , 1.100 , 1.100 ]
		dot2ScaleYAnimation.keyTimes = [0.000, 0.074 , 0.148 , 1.000 ]
		dot2ScaleYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, linearTiming]
		dot2ScaleYAnimation.beginTime = beginTime
		dot2ScaleYAnimation.fillMode = fillMode
		dot2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["dot 2"]?.layer.add(dot2ScaleYAnimation, forKey:"doit_ScaleY")

		let bottomWave22RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		bottomWave22RotationAnimation.duration = 6.750
		bottomWave22RotationAnimation.values = [0.000 , 0.000 , 0.052 , -0.052 , 0.000 , 0.000 ]
		bottomWave22RotationAnimation.keyTimes = [0.000, 0.519 , 0.555 , 0.593 , 0.630 , 1.000 ]
		bottomWave22RotationAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, linearTiming]
		bottomWave22RotationAnimation.beginTime = beginTime
		bottomWave22RotationAnimation.fillMode = fillMode
		bottomWave22RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["bottomWave 2 2"]?.layer.add(bottomWave22RotationAnimation, forKey:"doit_Rotation")

		let bottomWave22OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		bottomWave22OpacityAnimation.duration = 6.750
		bottomWave22OpacityAnimation.values = [0.000 , 0.000 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , 1.000 ]
		bottomWave22OpacityAnimation.keyTimes = [0.000, 0.148 , 0.222 , 0.296 , 0.370 , 0.444 , 0.519 , 1.000 ]
		bottomWave22OpacityAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, linearTiming]
		bottomWave22OpacityAnimation.beginTime = beginTime
		bottomWave22OpacityAnimation.fillMode = fillMode
		bottomWave22OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["bottomWave 2 2"]?.layer.add(bottomWave22OpacityAnimation, forKey:"doit_Opacity")
	}

	func removeDoitAnimation() {
		self.layer.removeAnimation(forKey: "Doit")
		self.viewsByName["topWave 2"]?.layer.removeAnimation(forKey: "doit_Rotation")
		self.viewsByName["topWave 2"]?.layer.removeAnimation(forKey: "doit_Opacity")
		self.viewsByName["dot 2"]?.layer.removeAnimation(forKey: "doit_ScaleX")
		self.viewsByName["dot 2"]?.layer.removeAnimation(forKey: "doit_ScaleY")
		self.viewsByName["bottomWave 2 2"]?.layer.removeAnimation(forKey: "doit_Rotation")
		self.viewsByName["bottomWave 2 2"]?.layer.removeAnimation(forKey: "doit_Opacity")
	}

	// - MARK: hide

	func addHideAnimation() {
		addHideAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addHideAnimation(_ completion: ((Bool) -> Void)?) {
		addHideAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addHideAnimation(removedOnCompletion: Bool) {
		addHideAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addHideAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addHideAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addHideAnimationWithBeginTime(_ beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.000
			representativeAnimation.delegate = self as? CAAnimationDelegate
			self.layer.add(representativeAnimation, forKey: "Hide")
			self.animationCompletions[layer.animation(forKey: "Hide")!] = complete
		}

		let signalOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		signalOpacityAnimation.duration = 0.000
		signalOpacityAnimation.values = [0.000 ]
		signalOpacityAnimation.keyTimes = [0.000]
		signalOpacityAnimation.beginTime = beginTime
		signalOpacityAnimation.fillMode = fillMode
		signalOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["signal"]?.layer.add(signalOpacityAnimation, forKey:"hide_Opacity")
	}

	func removeHideAnimation() {
		self.layer.removeAnimation(forKey: "Hide")
		self.viewsByName["signal"]?.layer.removeAnimation(forKey: "hide_Opacity")
	}

    func animationDidStop(_ anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Doit")
		self.layer.removeAnimation(forKey: "Hide")
	}
}
