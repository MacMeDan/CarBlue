
//
// CarBlueView.swift
// Generated by Core Animator version 1.1.1 on 8/31/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class CarBlueView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 378, height: 362))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:378, height:362)
		__scaling__.center = CGPoint(x:189.4, y:181.4)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let carBlue = UIImageView()
		carBlue.bounds = CGRect(x:0, y:0, width:76.0, height:76.0)
		var imgIcon76: UIImage!
		if let imagePath = bundle.pathForResource("Icon-76.png", ofType:nil) {
			imgIcon76 = UIImage(contentsOfFile:imagePath)
		}
		carBlue.image = imgIcon76
		carBlue.contentMode = .Center;
		carBlue.layer.position = CGPoint(x:183.449, y:183.449)
		carBlue.transform = CGAffineTransformMakeScale(4.83, 4.83)
		__scaling__.addSubview(carBlue)
		viewsByName["CarBlue"] = carBlue

		self.viewsByName = viewsByName
	}

	// - MARK: carStart

	func addCarStartAnimation() {
		addCarStartAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCarStartAnimation(completion: ((Bool) -> Void)?) {
		addCarStartAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCarStartAnimation(#removedOnCompletion: Bool) {
		addCarStartAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCarStartAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCarStartAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCarStartAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 2.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "CarStart")
			self.animationCompletions[layer.animationForKey("CarStart")] = complete
		}

		let carBlueRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carBlueRotationAnimation.duration = 2.500
		carBlueRotationAnimation.values = [0.000 as Float, 0.017 as Float, 0.000 as Float, -0.012 as Float, 0.000 as Float, 0.035 as Float, -0.035 as Float, -0.000 as Float, 0.035 as Float, -0.035 as Float, 0.000 as Float]
		carBlueRotationAnimation.keyTimes = [0.000 as Float, 0.240 as Float, 0.320 as Float, 0.380 as Float, 0.440 as Float, 0.520 as Float, 0.600 as Float, 0.680 as Float, 0.740 as Float, 0.840 as Float, 1.000 as Float]
		carBlueRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		carBlueRotationAnimation.beginTime = beginTime
		carBlueRotationAnimation.fillMode = fillMode
		carBlueRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["CarBlue"]?.layer.addAnimation(carBlueRotationAnimation, forKey:"carStart_Rotation")

		let carBlueOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		carBlueOpacityAnimation.duration = 2.500
		carBlueOpacityAnimation.values = [0.955 as Float, 1.000 as Float, 0.981 as Float, 0.981 as Float]
		carBlueOpacityAnimation.keyTimes = [0.000 as Float, 0.260 as Float, 0.600 as Float, 1.000 as Float]
		carBlueOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		carBlueOpacityAnimation.beginTime = beginTime
		carBlueOpacityAnimation.fillMode = fillMode
		carBlueOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["CarBlue"]?.layer.addAnimation(carBlueOpacityAnimation, forKey:"carStart_Opacity")

		let carBlueScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		carBlueScaleXAnimation.duration = 2.500
		carBlueScaleXAnimation.values = [4.828 as Float, 4.958 as Float, 4.838 as Float, 4.858 as Float, 4.848 as Float, 4.848 as Float]
		carBlueScaleXAnimation.keyTimes = [0.000 as Float, 0.100 as Float, 0.200 as Float, 0.500 as Float, 0.720 as Float, 1.000 as Float]
		carBlueScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		carBlueScaleXAnimation.beginTime = beginTime
		carBlueScaleXAnimation.fillMode = fillMode
		carBlueScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["CarBlue"]?.layer.addAnimation(carBlueScaleXAnimation, forKey:"carStart_ScaleX")

		let carBlueScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		carBlueScaleYAnimation.duration = 2.500
		carBlueScaleYAnimation.values = [4.828 as Float, 4.958 as Float, 4.838 as Float, 4.858 as Float, 4.848 as Float, 4.848 as Float]
		carBlueScaleYAnimation.keyTimes = [0.000 as Float, 0.100 as Float, 0.200 as Float, 0.500 as Float, 0.720 as Float, 1.000 as Float]
		carBlueScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		carBlueScaleYAnimation.beginTime = beginTime
		carBlueScaleYAnimation.fillMode = fillMode
		carBlueScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["CarBlue"]?.layer.addAnimation(carBlueScaleYAnimation, forKey:"carStart_ScaleY")

		let carBlueTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carBlueTranslationYAnimation.duration = 2.500
		carBlueTranslationYAnimation.values = [0.000 as Float, 2.000 as Float, 1.000 as Float, 3.000 as Float, 1.000 as Float, 1.000 as Float]
		carBlueTranslationYAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.440 as Float, 0.640 as Float, 0.860 as Float, 1.000 as Float]
		carBlueTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		carBlueTranslationYAnimation.beginTime = beginTime
		carBlueTranslationYAnimation.fillMode = fillMode
		carBlueTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["CarBlue"]?.layer.addAnimation(carBlueTranslationYAnimation, forKey:"carStart_TranslationY")
	}

	func removeCarStartAnimation() {
		self.layer.removeAnimationForKey("CarStart")
		self.viewsByName["CarBlue"]?.layer.removeAnimationForKey("carStart_Rotation")
		self.viewsByName["CarBlue"]?.layer.removeAnimationForKey("carStart_Opacity")
		self.viewsByName["CarBlue"]?.layer.removeAnimationForKey("carStart_ScaleX")
		self.viewsByName["CarBlue"]?.layer.removeAnimationForKey("carStart_ScaleY")
		self.viewsByName["CarBlue"]?.layer.removeAnimationForKey("carStart_TranslationY")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("CarStart")
	}
}